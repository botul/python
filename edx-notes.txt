Tuple

nie można zmieniać wartości

można użyć do zamiany wartości dwóch zmiennych
(x, y) = (y, x)

-------------

def get_data(aTuple):
	nums = ()
	words = ()
	for t in aTuple:
		nums = nums + (t[0],)
		if t[1] not in words:
			words = words + (t[1],)
	min_nums = min(nums)
	max_nums = max(nums)
	unique_words = len(words)
	return (min_nums, max_nums, unique_words)
	
(small, large, words) = get_data(((1, 'mine'), (3, yours), (5, ours), (7, mine)))

----
x = [1, 2, [3, 'John', 4], 'Hi'] 

L = [2, 1, 3]
L.append(5)
L
[2, 1, 3, 5]

Usuwanie elementu o danym indeksie:
del(L[1])
[2, 3, 5]

Usuwanie podanego elementu:
L.remove(3)

Usuwanie ostatniego elementu:
L.pop()

s = "I <3 cs"
list(s)
['I', ' ', '<', '3', ' ', 'c', 's']
s.split('<')
['I ', '3 cs']

L = ['a', 'b', 'c']
''.join(L)
"abc"
'_'.join(L)
"a_b_c"

L=[9,6,0,3]
sorted(L)
[0, 3, 6, 9]

ale "L" jest nadal bez zmian
L
[9,6,0,3]

L.sort()
L
[0, 3, 6, 9]

L.reverse()
L
[9,6,3,0]

range()
range(5)
[0,1,2,3,4]
range(2,6)
[2,3,4,5]
range(5,2,-1)
[5,4,3]

#------------
# aliasy tablic

warm = ['red', 'yellow', 'orange']
hot = warm

hot.append('pink')

hot
['red', 'yellow', 'orange', 'pink']
warm
['red', 'yellow', 'orange', 'pink']


#---------------
#print is not ==

cool = ['blue', 'green', 'grey']
chill = ['blue', 'green', 'grey']

print(cool)
print(chill)

chill[2] = 'blue'
print(cool)
['blue', 'green', 'grey']

print(chill)
['blue', 'green', 'blue']

#--------------------
# klonowanie list

cool = ['blue', 'green', 'grey']
chill = cool[:]

#chill to kopia listy cool
chill.append('black')

cool
['blue', 'green', 'grey']

chill
['blue', 'green', 'grey', 'black']

#-----------------------------------
# sorting lists

warm = ['red', 'yellow', 'orange']
sortedwarm = warm.sort()

print (warm)
['orange', 'red', 'yellow']

print (sortedwarm)
None

cool = ['grey', 'green', 'blue' ]
sortedcool = sorted(cool)

print(cool)
['grey', 'green', 'blue' ]

print(sortedcool)
['blue', 'green', 'grey']

# nested lists

warm = ['yellow', 'orange']
hot = ['red']

brightcolors = [warm]

brightcolors
[['yellow', 'orange']]

brightcolors.append(hot)
print(brightcolors)
[['yellow', 'orange'], [red]]

hot.append('pink')
print(brightcolors)
[['yellow', 'orange'], ['red', 'pink']]

print(hot + warm)
['red', 'pink', 'yellow', 'orange']

# Funkcje

def applyToEach(L, f):
	for i in range(len(L)):
		L[i] = f(L[i])

L = [1, -2, 3.4]

applyToEach(L, abs)

[1, 2, 3.4]

applyToEach(L, int)
[1, 2, 3]

applyToEach(L, fact)
[1, 2, 6]


# Apply list of functions to a number

def applyFuns(L, x):
	for i in L:
		print(f(x))

applyFuns([abs, int, fact, fib], 4)
4
4
24
5

#generalization

map(abs, [1, -2, -3, 4])

for elt in map(abs, [1, -2, -3, 4])
	print(elt)

[1, 2, 3, 4]

# multi arguments

L1 = [1, 28, 36]
L2 = [2, 57, 9]
	for elt in map(min, L1, L2):
		print(elt)

[1, 28, 9]

#---------------------------

seq[i]
len(seq)
seq1 + seq2
n*seq
seq[start:end]
e in seq
e not in seq
for e in seq

#-----------------------------------
# Dictionaries

Store pairs of data
- key
- value

grades = {'Anna':'B', 'John':'A+', 'Denise':'A', 'Katy':'A'}
grades ['John']
'A+'

John in grades
True

add:
grades['Sylvan'] = 'A'

test:
'John' in grades

delete:
del(grades['Anna'])

grades.keys()
grades.values()

Values:
- any type (mutable and immutable)
- can be duplicates
- dictionary values can be list, even other dictionaries

Keys:
- must be unique
- immutable type
- careful with float type as a key!

#------------------------

def lyrics_to_frequencies(lyrics):
	myDict = {}
	for word in lyrics:
		if word in myDict:
			myDict[word] += 1
		else:
			myDict[word] = 1
	return myDict

def most_common_words(freqs):
	values = freqs.values()
	best = max(values)
	words = []
	for k in freqs:
		if freqs[k] == best:
			words.append(k)
	return (words, best)

def words_often(freqs, minTimes):
	result = []
	done = False
	while not done:
		temp = most_common_words(freqs)
		if temp[1] >= minTimes:
			result.append(temp)
			for w in temp[0]:
				del(freqs[w])
		else:
			done = True
	return result

print (words_often(beatles, 5))


Ex "how many"



animals = { 'a': ['aardvark'], 'b': ['baboon'], 'c': ['coati']}

animals['d'] = ['donkey']
animals['d'].append('dog')
animals['d'].append('dingo')

def biggest(aDict):
	vals = aDict.values()
	maks = max(vals)
	words = []
	for k in aDict:
		if aDict[k] == maks:
			words.append(k)
	return (words, maks)
	




def how_many(aDict):
freq = {}
	for word in aDict:
		if word in freq:
			freq[word] += 1
		else:
			freq[word] = 1
	return freq


#-------------------------------------------------------

#Fibonacci - wersja efktywna ze słownikiem rozwiązań

def fib_efficient (n, d):
	if n in d:
		return d[n]
	else:
		ans = fib_efficient(n-1, d) + fib_efficient(n-2, d)
		d[n] = ans
		return ans
		
d = {1:1, 2:2}
print(fib_efficient(6, d))

#---------------------------

def myLog(x, b):
    e = 0
    l = 0
    while l < x:
        e += 1
        l = b**e
    return(e)

print(myLog(15, 3))

##-----------------------------------------
## Testing and debugging

#print statements

Error messages - easy:

Index error - trying to access beyond the limits of a list
test = [1,2,3] test[4]

TypeError
int(test)

NameError - referencing non-existent variable
a

TypeError - mixing data types without appropriate coercion
'3'/4

SyntaxError - forgetting to close parenthesis, quotation, etc.
a = len([1,2,3]
print a

Logic errors - hard:

- think before writing new code
- draw pictures, take a break
- explain the code to a rubber duck

Debugging steps:

Study program code:
- ask how did I get the unexpected result
- don't ask what is wrong
- is it a part of a family?

Scientific methods:
- study available data
- form hypothesis
- repeatable experiments
- pick simplest input to test with 


#--------------------------------------------------------------------------

#Exceptions and assertions

SyntaxError: Python can't parse program
NameError: local or global name not found
AttributeError: attribute reference fails
TypeError: operand doesn't have corect type
ValueError: operand type okay, but have is illegal
IOError: IO system reports malfunction (e.g. file not found)

try:
	a = int(input("Tell me one number:"))
	b = int(input("Tell me another number:"))
	print(a/b)
except:
	print("Bug in user input")
print("Outside")

try:
	a = int(input("Tell me one number:"))
	b = int(input("Tell me another number:"))
	print(a/b)
except ValueError:
	print("Could not convert to a number")
except ZeroDivisionError:
	print("Can't divide by zero")
except:
	print("Something went very wrong")


Other exceptions:
else:
- body of this is executed when execution of associated try body complets with no exceptions

finally:
- body of this is always executed after try, else and except clauses, even if they raised another error or executed a break, continue or return


while True:
	try:
		n = input("Please enter an integer: ")
		n = int(n)
		break
	except ValueError:
		print("Input not an integer; try again")
print("Correct input of an integer!")


Example - contro input:

data = []
file_name = input("Provide a name of a file of data ")

try:
	fh = open(file_name, 'r')
except IOError:
	print("Cannot open ", file_name)
else:
	for new in fh:
		if new != '\n':
			addIt = new[:-1].split(',') #remove trailing \n
			data.append(addIt)
finally:
	fh.close() # close file even if fails

gradesData = []
if data:
	for student in data:
		try:
			gradesData.append([student[0:2], [student[2]]])
		except:
			gradesData.append([student[0:2], []])


##------------------------------------------------------------------------------------

#to nie działa z pojedyńczą nazwą (tylko imię - ocena ląduje w nazwisku) lub nazwą 3 członową - nazwisko ląduje w ocenie

##------------------------------------------------------------------------------------
# FIX:

data = []
file_name = input("Provide a name of a file of data ")

try:
	fh = open(file_name, 'r')
except IOError:
	print("Cannot open ", file_name)
else:
	for new in fh:
		if new != '\n':
			addIt = new[:-1].split(',') #remove trailing \n
			data.append(addIt)
finally:
	fh.close() # close file even if fails

gradesData = []
if data:
	for student in data:
		try:
			name = studen[0:-1]
			grades = int(student[-1])
			gradesData.append([name, [grades]])
		except ValueError:
			gradesData.append([student[:], []])


# Exceptions as control flow

raise <exceptionName>(<arguments>)
raise ValueError("Something is wrong")

#---

def get_ratios(L1, L2):
	"""Assumes: L1 and L2 are lists of equal length of numbers
		Returns: a list containing L1[i]/L2[i] """

	ratios = []
	for index in range(len(L1)):
		try:
			ratios.append(L1[index]/float(L2[index]))
		except ZeroDivisionError:
			ratios.append(float('NaN')) #NaN - Not a Number
		except:
			raise ValueError('get_ratios called with bad arg')
	return ratios

	
